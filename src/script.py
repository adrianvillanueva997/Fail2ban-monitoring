import os
import time

import numpy as np
import requests
import sqlalchemy
from dotenv import load_dotenv
from sqlalchemy import create_engine
from sqlalchemy.sql import text


def setup_connection() -> sqlalchemy.engine.base.Engine:
    """Setup SQLAlchemy connection to the database
    Returns:
        sqlalchemy.engine.base.Engine: engine to make the connection to the database.
    """
    load_dotenv()
    return create_engine(
        f"mysql+mysqldb://{os.getenv('username')}:{os.getenv('password')}@{os.getenv('ip')}",
        encoding="utf-8",
    )


def read_f2b_output() -> np.ndarray[str, np.dtype[str]]:
    """Reads the output generated by the f2b shell script.

    Returns:
        np.ndarray[str, np.dtype[str]]: _description_

    """
    ips = []
    with open("./f2b.txt", encoding="utf-8") as file:
        for ip in file:
            ip = ip.replace("\n", "")
            ips.append(ip)
    return np.array(ips)


def get_ip_metadata(
    ip: str,
) -> tuple[str, str, int, float, float, float] | None:
    """Extracts more data from the given ip using an external service.

    Args:
        ip (str): ip to be data mined

    Returns:
        Optional[tuple[str, str, int, float, float, float]]: country, city, cp, lat, lon, isp

    """
    request = None
    try:
        request = requests.get(
            f"http://ip-api.com/json/{ip}",
        )  # This endpoint is limited to 45 requests per minute

    except Exception:
        pass
    if request is None:
        return None
    data = request.json()
    country: str = data["country"]
    city: str = data["city"]
    cp: int = data["zip"]
    lat: float = data["lat"]
    lon: float = data["lon"]
    isp: float = data["isp"]
    return country, city, cp, lat, lon, isp


def insert_data_in_db(ips: np.ndarray[str, np.dtype[str]]) -> None:
    """Inserts the data in the database.

    Args:
        ips (np.ndarray[str, np.dtype[str]]): ips to insert

    """
    engine = setup_connection()
    with engine.connect() as conn:
        for ip in ips:
            try:
                query = text(
                    "insert into Grafana.ips values (:_ip,:_country,:_city,:_zip,:_lat,:_lng,:_isp, curdate()) ",
                )
                country, city, cp, lat, lon, isp = get_ip_metadata(ip)
                if country is not None:
                    conn.execute(
                        query,
                        _ip=ip,
                        _country=country,
                        _city=city,
                        _zip=cp,
                        _lat=lat,
                        _lng=lon,
                        _isp=isp,
                    )
                    time.sleep(1.5)
            except Exception:
                time.sleep(1.5)


if __name__ == "__main__":
    ips = read_f2b_output()
    insert_data_in_db(ips)
